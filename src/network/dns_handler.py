#!/usr/bin/env python3
import os
import subprocess
import logging
import socket

class DNSHandler:
    def __init__(self, dnsmasq_conf_path="/etc/dnsmasq.conf.d/website_blocker.conf"):
        self.dnsmasq_conf_path = dnsmasq_conf_path
        self.blocked_ips = set()  # Set to store resolved IPs of blocked websites
    
    def update_dns_blocking(self, websites, blocking=True):
        """Update DNS blocking configuration using dnsmasq"""
        # If dnsmasq is not available, skip this step
        if not self._is_dnsmasq_available():
            logging.info("dnsmasq not available, skipping DNS-level blocking")
            return False
            
        dnsmasq_dir = os.path.dirname(self.dnsmasq_conf_path)
        
        # Create dnsmasq conf directory if it doesn't exist
        if not os.path.exists(dnsmasq_dir):
            try:
                os.makedirs(dnsmasq_dir, exist_ok=True)
                logging.info(f"Created dnsmasq configuration directory: {dnsmasq_dir}")
            except Exception as e:
                logging.error(f"Failed to create dnsmasq configuration directory: {e}")
                return False
        
        try:
            if blocking:
                # Create dnsmasq configuration
                with open(self.dnsmasq_conf_path, 'w') as f:
                    f.write("# Automatically generated by website blocker\n\n")
                    for website in websites:
                        website = website.strip()
                        if website and not website.startswith('#'):
                            f.write(f"address=/{website}/127.0.0.1\n")
                            # Also block www subdomain if not already included
                            if not website.startswith('www.'):
                                f.write(f"address=/www.{website}/127.0.0.1\n")
                
                logging.info("Created dnsmasq configuration for DNS-level blocking")
                
                # Restart dnsmasq to apply changes
                self._restart_dnsmasq()
                
                # Resolve and store IPs of blocked websites for firewall rules
                self._resolve_and_store_ips(websites)
                
            else:
                # Remove the configuration file if it exists
                if os.path.exists(self.dnsmasq_conf_path):
                    os.remove(self.dnsmasq_conf_path)
                    logging.info("Removed dnsmasq configuration for DNS-level blocking")
                    
                    # Restart dnsmasq to apply changes
                    self._restart_dnsmasq()
                    
                    # Clear the set of blocked IPs
                    self.blocked_ips.clear()
            
            # Flush the DNS cache to ensure changes take effect
            self.flush_dns_cache()
            
            return True
            
        except Exception as e:
            logging.error(f"Failed to update DNS blocking: {e}")
            return False
    
    def _is_dnsmasq_available(self):
        """Check if dnsmasq is available on the system"""
        try:
            result = subprocess.run(["which", "dnsmasq"], 
                                   stdout=subprocess.PIPE, 
                                   stderr=subprocess.PIPE, 
                                   text=True)
            return result.returncode == 0
        except Exception:
            return False
    
    def _restart_dnsmasq(self):
        """Restart dnsmasq service to apply configuration changes"""
        try:
            # Try systemctl first (for systemd-based systems)
            systemctl_result = subprocess.run(["systemctl", "restart", "dnsmasq"], 
                                             stdout=subprocess.PIPE, 
                                             stderr=subprocess.PIPE)
            
            if systemctl_result.returncode != 0:
                # Try service command (for init.d-based systems)
                service_result = subprocess.run(["service", "dnsmasq", "restart"], 
                                               stdout=subprocess.PIPE, 
                                               stderr=subprocess.PIPE)
                
                if service_result.returncode != 0:
                    # Try to find the dnsmasq process and kill it to restart
                    kill_result = subprocess.run(["pkill", "dnsmasq"], 
                                                stdout=subprocess.PIPE, 
                                                stderr=subprocess.PIPE)
                    
                    # Wait a moment and then start dnsmasq
                    subprocess.run(["dnsmasq"], 
                                  stdout=subprocess.PIPE, 
                                  stderr=subprocess.PIPE)
            
            logging.info("Restarted dnsmasq service")
            
        except Exception as e:
            logging.error(f"Failed to restart dnsmasq: {e}")
    
    def _resolve_and_store_ips(self, websites):
        """Resolve domain names to IP addresses and store them for firewall rules"""
        for website in websites:
            website = website.strip()
            if website and not website.startswith('#'):
                try:
                    # Try to resolve the domain
                    ip_addresses = socket.gethostbyname_ex(website)[2]
                    for ip in ip_addresses:
                        self.blocked_ips.add(ip)
                    
                    # Also try to resolve www subdomain if not already included
                    if not website.startswith('www.'):
                        try:
                            www_ip_addresses = socket.gethostbyname_ex(f"www.{website}")[2]
                            for ip in www_ip_addresses:
                                self.blocked_ips.add(ip)
                        except socket.gaierror:
                            pass
                
                except socket.gaierror:
                    logging.warning(f"Could not resolve IP for {website}")
        
        logging.info(f"Resolved {len(self.blocked_ips)} IP addresses for blocked websites")
    
    def flush_dns_cache(self):
        """Flush DNS cache to ensure blocks take effect immediately"""
        try:
            # macOS
            if os.path.exists("/usr/bin/dscacheutil"):
                subprocess.run(["dscacheutil", "-flushcache"], 
                              stdout=subprocess.PIPE, 
                              stderr=subprocess.PIPE)
                subprocess.run(["killall", "-HUP", "mDNSResponder"], 
                              stdout=subprocess.PIPE, 
                              stderr=subprocess.PIPE)
                logging.info("Flushed DNS cache (macOS)")
                
            # Linux with systemd-resolved
            elif os.path.exists("/usr/bin/systemd-resolve"):
                subprocess.run(["systemd-resolve", "--flush-caches"], 
                              stdout=subprocess.PIPE, 
                              stderr=subprocess.PIPE)
                logging.info("Flushed DNS cache (systemd-resolved)")
                
            # Linux with nscd
            elif os.path.exists("/etc/init.d/nscd"):
                subprocess.run(["service", "nscd", "restart"], 
                              stdout=subprocess.PIPE, 
                              stderr=subprocess.PIPE)
                logging.info("Flushed DNS cache (nscd)")
                
            # Other Linux distributions might have different methods
            else:
                logging.info("Could not find a known method to flush DNS cache")
                
        except Exception as e:
            logging.error(f"Failed to flush DNS cache: {e}") 